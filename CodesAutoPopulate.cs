// Skeleton generated by Hyland Unity Editor on 4/23/2025 3:18:50 PM
namespace APPProviderProcedureCodeandModifier
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.UnityForm;
    using System.Data.SqlClient;
    
    /// <summary>
    /// APP Provider Procedure Code and Modifier
    /// </summary>
    public class APPProviderProcedureCodeandModifier : Hyland.Unity.UnityForm.IUnityFormCustomActionEventScript
    {
        
        #region IUnityFormCustomActionEventScript
        /// <summary>
        /// Implementation of <see cref="IUnityFormCustomActionEventScript.OnCustomActionExecuteAction" />.
        /// <seealso cref="IUnityFormCustomActionEventScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnCustomActionExecuteAction(Hyland.Unity.Application app, Hyland.Unity.UnityForm.UnityFormCustomActionEventArgs args)
        {
			string PROC_ID = "ProcCode";
			string modNum = "Mod";
			string APPEAL_ID = "AppealInfo";

			string modDesc = "ModDesc";
			string desc = "";
			
			
			app.Diagnostics.Write("Procedure and Modifier Description Script");
			
			Form form = args.FormInstance;
            Hyland.Unity.UnityForm.FormModifier formModifier = form.CreateUnityFormModifier();
			
			try
			{
				SqlConnection conn = (SqlConnection)app.Configuration.GetConnection("J5_DB");
				conn.Open();
				SqlCommand cmd1 = conn.CreateCommand();
				
				
				foreach (var repeater in args.FormInstance.AllFields.RepeaterFields)
                {
                    if (repeater.FieldDefinition.Name != APPEAL_ID) continue;
                    app.Diagnostics.Write("Processing AppealInfo repeater...");

                    foreach (var row in repeater.RepeaterItems)
					{
						EditableRepeaterItem editable = row.CreateEditableRepeaterItem();
						
						var proc = row.AllFields.ValueFields.Find(PROC_ID);
						
						app.Diagnostics.Write("Procedure code: " + proc);
					
						if(proc != null && !proc.IsEmpty)
						{
							string procCode = proc.Value.ToString();
							cmd1.CommandText = "SELECT [description] FROM [dbo].[procedure_full_description] WHERE [procedure_code] = @proc";
							cmd1.Parameters.Add("@proc", System.Data.SqlDbType.NVarChar, 5).Value = procCode;
							desc = cmd1.ExecuteScalar().ToString();
							app.Diagnostics.Write("Description: " + desc);
						
							
							editable.SetFieldValue("ProcDescription", desc);
						}
					
						for(int i = 1; i < 5; i++)
						{
							SqlCommand cmd2 = conn.CreateCommand();
							string MOD_ID = modNum + i;
							var mod = row.AllFields.ValueFields.Find(MOD_ID);
							
							if(mod != null && !mod.IsEmpty) 
							{
								string modCode = mod.Value.ToString();
								cmd2.CommandText = "SELECT TOP (1) [description] FROM [dbo].[mcs_modifier_description] WHERE [modifier] = @mod";
								cmd2.Parameters.Add("@mod", System.Data.SqlDbType.NVarChar, 2).Value = modCode;
								desc = cmd2.ExecuteScalar().ToString();
								app.Diagnostics.Write("Description: " + desc);
					
								string MOD_DESC = modDesc + i;
								editable.SetFieldValue(MOD_DESC, desc);
								
							}
						}
						
						formModifier.UpdateRepeaterItem(editable);
						formModifier.ApplyChanges();
					
					}
				conn.Close();
				}
			}catch (Exception e)
			{
				app.Diagnostics.Write("error" + e);
			}
			
			
			
        }
        #endregion
    }
}
