// Skeleton generated by Hyland Unity Editor on 1/21/2025 12:24:35 PM
namespace ECTAPGetTypeandRequestor
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using HylandHelpers;
	using System.Data;
	using System.Data.SqlClient;
 	using System.Collections.Generic;
    
    /// <summary>
    /// ECT - AP Get Type and Requestor
    /// </summary>
    public class ECTAPGetTypeandRequestor : Hyland.Unity.IWorkflowScript
    {
        
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
            string storedProcedureName = "[dbo].[sp_bw_getPOHeader]";
			string PONumber = "";
			string type = "";
			string requestor = "";
			
			try {
				foreach(KeywordRecord kr in args.Document.KeywordRecords){
					foreach(Keyword kw in kr.Keywords){
						
						if(kw.KeywordType.Name.Equals("P.O. #")){
							PONumber = kw.AlphaNumericValue;
						}
					}
				}
				
				using(SqlConnection conn = (SqlConnection)app.Configuration.GetConnection("Oracle BTLApps")){
					conn.Open();
					app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Connected to BTLApps, PO = " + PONumber);
					
					using(SqlCommand command = new SqlCommand(storedProcedureName, conn)){
						 command.CommandType = CommandType.StoredProcedure;

                   		 // Add input parameters (replace with actual parameter names and values)
                   		 command.Parameters.AddWithValue("@PO", PONumber);
						 
						 using(SqlDataReader reader = command.ExecuteReader()){
						 	if(reader.HasRows){
								while(reader.Read()){
									app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info,$"PO: {reader["PO"]}, Type: {reader["PO_TYPE"]}, Requestor: {reader["REQUESTOR"]}" );
									if(reader[5] != null) type = reader[5].ToString();
									if(reader[9] != null) requestor = reader[9].ToString();
								}
							}
						 }
						
						
					}
				}
				
				if(type != ""){
				    KeywordModifier keyModifier1 = args.Document.CreateKeywordModifier();
				    //find the keyword type (used to find the keyword record)
				    KeywordType keywordType1 = app.Core.KeywordTypes.Find("Type");
				    
				    // Create new keyword for keyword type, to hold the updated value
				    Keyword newKeyword1 = keywordType1.CreateKeyword(type);
				    
				    keyModifier1.AddKeyword(newKeyword1);
				    keyModifier1.ApplyChanges();
				   }
				if(requestor != ""){
				    KeywordModifier keyModifier2 = args.Document.CreateKeywordModifier();
				    //find the keyword type (used to find the keyword record)
				    KeywordType keywordType2 = app.Core.KeywordTypes.Find("Requestor");
				    
				    // Create new keyword for keyword type, to hold the updated value
				    Keyword newKeyword2 = keywordType2.CreateKeyword(requestor);
				    
				    keyModifier2.AddKeyword(newKeyword2);
				    keyModifier2.ApplyChanges();
				   }
			}
			
			catch(Exception ex){
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Error,ex);
			}
        }
        #endregion
    }
}
